/*
 * Galacticraft Capes API
 * Galacticraft Cape API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GalacticraftCapesApi);
  }
}(this, function(expect, GalacticraftCapesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GalacticraftCapesApi.PlayerApi();
  });

  describe('(package)', function() {
    describe('PlayerApi', function() {
      describe('createPlayer', function() {
        it('should call createPlayer successfully', function(done) {
          // TODO: uncomment, update parameter values for createPlayer call
          /*
          var body = new GalacticraftCapesApi.Player();
          body.uuid = new GalacticraftCapesApi.GUUID();
          body.uuid.dashed = "046b6c7f-0b8a-43b9-b35d-6489e6daee91";
          body.uuid.plain = "046b6c7f0b8a43b9b35d6489e6daee91";
          body.name = "Micdoodle8";
          body.cape = new GalacticraftCapesApi.Cape();
          body.cape.name = "redCape";
          body.cape.type = new GalacticraftCapesApi.Type();
          body.cape.type.type = "legacy";
          body.allowedCapes = new GalacticraftCapesApi.Type();
          body.allowedCapes.type = "legacy";

          instance.createPlayer(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePlayer', function() {
        it('should call deletePlayer successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePlayer call
          /*
          var playername = "playername_example";

          instance.deletePlayer(playername, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlayerByName', function() {
        it('should call getPlayerByName successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlayerByName call and complete the assertions
          /*
          var playername = "playername_example";

          instance.getPlayerByName(playername, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(GalacticraftCapesApi.Player);
            expect(data.uuid).to.be.a(GalacticraftCapesApi.GUUID);
                  expect(data.uuid.dashed).to.be.a('string');
              expect(data.uuid.dashed).to.be("046b6c7f-0b8a-43b9-b35d-6489e6daee91");
              expect(data.uuid.plain).to.be.a('string');
              expect(data.uuid.plain).to.be("046b6c7f0b8a43b9b35d6489e6daee91");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Micdoodle8");
            expect(data.cape).to.be.a(GalacticraftCapesApi.Cape);
                  expect(data.cape.name).to.be.a('string');
              expect(data.cape.name).to.be("redCape");
              expect(data.cape.type).to.be.a(GalacticraftCapesApi.Type);
                    expect(data.cape.type.type).to.be.a('string');
                expect(data.cape.type.type).to.be("legacy");
            expect(data.allowedCapes).to.be.a(GalacticraftCapesApi.Type);
                  expect(data.allowedCapes.type).to.be.a('string');
              expect(data.allowedCapes.type).to.be("legacy");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePlayer', function() {
        it('should call updatePlayer successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePlayer call
          /*
          var playername = "playername_example";
          var body = new GalacticraftCapesApi.Player();
          body.uuid = new GalacticraftCapesApi.GUUID();
          body.uuid.dashed = "046b6c7f-0b8a-43b9-b35d-6489e6daee91";
          body.uuid.plain = "046b6c7f0b8a43b9b35d6489e6daee91";
          body.name = "Micdoodle8";
          body.cape = new GalacticraftCapesApi.Cape();
          body.cape.name = "redCape";
          body.cape.type = new GalacticraftCapesApi.Type();
          body.cape.type.type = "legacy";
          body.allowedCapes = new GalacticraftCapesApi.Type();
          body.allowedCapes.type = "legacy";

          instance.updatePlayer(playername, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
